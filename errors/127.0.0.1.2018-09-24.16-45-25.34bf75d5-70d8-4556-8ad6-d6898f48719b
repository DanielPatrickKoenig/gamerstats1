(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> Global_Sales    934.4\ndtype: float64 is not JSON serializable"
p3
sS'layer'
p4
S'C:\\projects\\web2py\\applications\\gamerstats1\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport json as json\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef load_data():\n    import pandas as pd\n    import os\n    import ujson\n    wd = os.getcwd()\n    privateDir = wd + \'/applications/gamerstats1/private/\'\n    df = pd.read_csv(privateDir+\'data/dataset_1/Video_Games_Sales_as_at_22_Dec_2016.csv\')\n    #print df\n    #genres = df.transpose().groupby(\'Global_Sales\')[[\'Action\',\'Adventure\',\'Fighting\',\'Misc\',\'Platform\',\'Puzzle\',\'Racing\',\'Role-Playing\',\'Shooter\',\'Simulation\',\'Sports\',\'Strategy\']].sum()\n    regions = df.groupby(\'Genre\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum()\n    systems = df.groupby(\'Platform\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum()\n    publishers = df.groupby(\'Publisher\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum()\n    years = df.groupby(\'Year_of_Release\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\',\'Global_Sales\']].sum()\n    names = df.groupby(\'Name\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\',\'Global_Sales\']].sum()\n    #print years  \n\n    output = {}\n    output[\'regions\'] = regions.to_dict()\n    output[\'genres\'] = regions.transpose().to_dict()\n    output[\'systems\'] = systems.transpose().to_dict()\n    output[\'publishers\'] = publishers.transpose().to_dict()\n    #output[\'genres\'] = genres.to_dict()\n    output[\'years\'] = years.to_dict()\n    output[\'names\'] = names.to_dict()\n    nameKeys = output[\'names\'][\'Global_Sales\'].keys()\n    #output[\'namesearchlist\'] = [n + \' | \' + \',\'.join(df[df[\'Name\'].isin([n])].dropna()[\'Platform\'].unique()) + \' | \' + \',\'.join(df[df[\'Name\'].isin([n])].dropna()[\'Publisher\'].unique()) + \' | \' + \',\'.join(df[df[\'Name\'].isin([n])].dropna()[\'Genre\'].unique()) for n in nameKeys]\n    output[\'namelist\'] = nameKeys\n    output[\'genrelist\'] = output[\'genres\'].keys()\n    output[\'publisherlist\'] = output[\'publishers\'].keys()\n    output[\'systemlist\'] = output[\'systems\'].keys()\n    \n    #ourput[\'name_list\'] = output[\'names\'][\'Global_Sales\'].keys()\n\n\n    return output\n\ndef update_data(req):\n    import pandas as pd\n    import os\n    import ujson\n\n    wd = os.getcwd()\n    privateDir = wd + \'/applications/gamerstats1/private/\'\n    df = pd.read_csv(privateDir+\'data/dataset_1/Video_Games_Sales_as_at_22_Dec_2016.csv\')\n\n    # genre = existsOrEmptyList(req.args.get(\'genre\'),req.args.get(\'splitter\'))\n    # system = existsOrEmptyList(req.args.get(\'system\'),req.args.get(\'splitter\'))\n    # publisher = existsOrEmptyList(req.args.get(\'publisher\'),req.args.get(\'splitter\'))\n    # game = existsOrEmptyList(req.args.get(\'game\'),req.args.get(\'splitter\'))\n\n    genre = existsOrEmptyList(req.vars[\'genre\'],req.vars[\'splitter\'])\n    system = existsOrEmptyList(req.vars[\'system\'],req.vars[\'splitter\'])\n    publisher = existsOrEmptyList(req.vars[\'publisher\'],req.vars[\'splitter\'])\n    game = existsOrEmptyList(req.vars[\'game\'],req.vars[\'splitter\'])\n\n    udf = df\n\n    tag_total = len(genre) + len(system) + len(publisher) + len(game)\n\n    if tag_total > 0:\n        udf = df[df[\'Genre\'].isin(genre) | df[\'Platform\'].isin(system) | df[\'Publisher\'].isin(publisher) | df[\'Name\'].isin(game)]\n    \n    sdf = udf.fillna(0)\n    sales = {n : sdf[sdf[\'Genre\'].isin([n])][[\'Global_Sales\']].sum() for n in [g for g in sdf[\'Genre\'].unique() if str(g) != \'0\']}\n    \n\n    #sales = udf[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n\n    years = udf.groupby(\'Year_of_Release\')[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum()\n\n    output = {}\n    output[\'subset\'] = {}\n    output[\'ratings\'] = {}\n\n    if tag_total > 0:\n        for g in genre:\n            output[\'subset\'][g] = udf[udf[\'Genre\'].isin([g])][[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n            output[\'ratings\'][g] = udf[udf[\'Genre\'].isin([g])][[\'Critic_Score\',\'User_Score\']].mean().dropna().to_dict()\n        \n        for g in system:\n            output[\'subset\'][g] = udf[udf[\'Platform\'].isin([g])][[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n            output[\'ratings\'][g] = udf[udf[\'Platform\'].isin([g])][[\'Critic_Score\',\'User_Score\']].mean().dropna().to_dict()\n\n        for g in publisher:\n            output[\'subset\'][g] = udf[udf[\'Publisher\'].isin([g])][[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n            output[\'ratings\'][g] = udf[udf[\'Publisher\'].isin([g])][[\'Critic_Score\',\'User_Score\']].mean().dropna().to_dict()\n\n        for g in game:\n            output[\'subset\'][g] = udf[udf[\'Name\'].isin([g])][[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n            output[\'ratings\'][g] = udf[udf[\'Name\'].isin([g])][[\'Critic_Score\',\'User_Score\']].mean().dropna().to_dict()\n    else:\n        output[\'subset\'][\'Total\'] = udf[[\'NA_Sales\',\'EU_Sales\',\'JP_Sales\',\'Other_Sales\']].sum().to_dict()\n\n    output[\'sales\'] = sales\n\n    output[\'years\'] = years.to_dict()\n\n    #print udf[[\'Critic_Score\']].dropna().sum()\n\n    #print output\n    \n    return output\n\ndef existsOrEmptyList(v,d):\n    output = []\n    if v is not None:\n        output = str(v).split(d)\n    return output\n\ndef data():\n    json.dumps(load_data())\n\ndef update():\n    json.dumps(update_data(request))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(update)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\projects\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\projects\\web2py\\applications\\gamerstats1\\controllers/default.py", line 178, in <module>\n  File "C:\\projects\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\projects\\web2py\\applications\\gamerstats1\\controllers/default.py", line 137, in update\n    json.dumps(update_data(request))\n  File "C:\\Program Files\\Anaconda2\\lib\\json\\__init__.py", line 244, in dumps\n    return _default_encoder.encode(obj)\n  File "C:\\Program Files\\Anaconda2\\lib\\json\\encoder.py", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File "C:\\Program Files\\Anaconda2\\lib\\json\\encoder.py", line 270, in iterencode\n    return _iterencode(o, 0)\n  File "C:\\Program Files\\Anaconda2\\lib\\json\\encoder.py", line 184, in default\n    raise TypeError(repr(o) + " is not JSON serializable")\nTypeError: Global_Sales    934.4\ndtype: float64 is not JSON serializable\n'
p11
s.